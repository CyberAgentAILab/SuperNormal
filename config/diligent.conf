general {
    dataset_class = models.dataset_loader.Dataset
    renderer_class = models.renderer.NeuSRenderer

    base_exp_dir = ./exp/diligent_mv/CASE_NAME
    recording = [
        ./,
        ./models
    ]
}

dataset {
    data_dir = data/diligent_mv_normals/CASE_NAME/
    normal_dir = normal_world_space_sdmunips # choose normal maps estimated by different methods, should be in the world space
    cameras_name = cameras_sphere.npz
    exclude_views = [0, 4, 8, 12, 16]  # index of views to exclude for test purpose, 0-based
    upsample_factor = 1
}

train {
    learning_rate = 5e-4
    learning_rate_alpha = 0.05
    end_iter = 5000
    increase_bindwidth_every = 350  # following neuralangelo's strategy

    gradient_method = dfd  # dfd or fd or ad, for directional finite difference, finite difference, and auto-differentiation

    batch_size = 2048
    patch_size = 3  # i.e., each training step samples 2048 patches of 3x3 pixels

    warm_up_end = 50
    use_white_bkgd = False

    loss_type = l2  # for normal loss
    normal_weight = 1
    eikonal_weight = 1
    mask_weight = 1
}

val {
    save_freq = 1000

    val_normal_freq = 5001
    val_normal_resolution_level = 1
    gradient_method = dfd  # dfd or fd or ad, can be different from training

    val_mesh_freq = 10000
    val_mesh_res = 512

    report_freq = 100
    eval_metric_freq = 5000
}

model {
    sdf_network {
        d_out = 1
        d_in = 3
        d_hidden = 64
        n_layers = 1
        skip_in = [-1]  # -1 for no skip connection
        bias = 0.6
        geometric_init = True
        weight_norm = True
        input_concat = True  # concat input positions and encoded features
    }

    variance_network {
        init_val = 0.5
    }

    ray_marching {
        start_step_size = 1e-2
        end_step_size = 1e-3
        occ_threshold = 0.1
        occ_sigmoid_k = 80.0
        occ_resolution = 128
        occ_update_freq = 8  # batches
    }

    encoding{
        otype=HashGrid,
		n_levels=14
		n_features_per_level=2
		log2_hashmap_size=19
		base_resolution=32
		per_level_scale=1.3195079107728942
   }
}